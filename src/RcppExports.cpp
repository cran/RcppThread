// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/RcppThread.h"
#include <Rcpp.h>

using namespace Rcpp;

// testMonitor
void testMonitor();
RcppExport SEXP _RcppThread_testMonitor() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    testMonitor();
    return R_NilValue;
END_RCPP
}
// testThreadClass
void testThreadClass();
RcppExport SEXP _RcppThread_testThreadClass() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    testThreadClass();
    return R_NilValue;
END_RCPP
}
// testThreadPool
void testThreadPool();
RcppExport SEXP _RcppThread_testThreadPool() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    testThreadPool();
    return R_NilValue;
END_RCPP
}
// testWait
void testWait();
RcppExport SEXP _RcppThread_testWait() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    testWait();
    return R_NilValue;
END_RCPP
}
// testSingleThreaded
void testSingleThreaded();
RcppExport SEXP _RcppThread_testSingleThreaded() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    testSingleThreaded();
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppThread_testMonitor", (DL_FUNC) &_RcppThread_testMonitor, 0},
    {"_RcppThread_testThreadClass", (DL_FUNC) &_RcppThread_testThreadClass, 0},
    {"_RcppThread_testThreadPool", (DL_FUNC) &_RcppThread_testThreadPool, 0},
    {"_RcppThread_testWait", (DL_FUNC) &_RcppThread_testWait, 0},
    {"_RcppThread_testSingleThreaded", (DL_FUNC) &_RcppThread_testSingleThreaded, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppThread(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
